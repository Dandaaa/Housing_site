[
  {
    "objectID": "Final-notebooks/Analysis Section.html",
    "href": "Final-notebooks/Analysis Section.html",
    "title": "Research Methods",
    "section": "",
    "text": "This website visualizes the historical development and potential futures of warehousing in Ontario, California. These data examines the environmental, public health, and economic effects of warehousing, taking care to highlight the labor and community-based movements resisting warehouse expansion.",
    "crumbs": [
      "Analysis Sections"
    ]
  },
  {
    "objectID": "Final-notebooks/Analysis Section.html#approaching-warehouse-impacts-through-people-centric-analysis",
    "href": "Final-notebooks/Analysis Section.html#approaching-warehouse-impacts-through-people-centric-analysis",
    "title": "Research Methods",
    "section": "",
    "text": "This website visualizes the historical development and potential futures of warehousing in Ontario, California. These data examines the environmental, public health, and economic effects of warehousing, taking care to highlight the labor and community-based movements resisting warehouse expansion.",
    "crumbs": [
      "Analysis Sections"
    ]
  },
  {
    "objectID": "Final-notebooks/2.1 EJIData.html",
    "href": "Final-notebooks/2.1 EJIData.html",
    "title": "Environmental and Health Data Exploration",
    "section": "",
    "text": "#importing the neccesary libraries\n\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.wkt import loads\n0 statefp 38 non-null object\n1 countyfp 38 non-null object\n2 affgeoid 38 non-null object\n3 geoid 38 non-null object\n4 county 38 non-null object\n5 location 38 non-null object\n6 e_totpop 38 non-null int64\n7 e_daypop 38 non-null int64\n8 rpl_eji 38 non-null float64 9 rpl_ser 38 non-null float64 10 epl_ozone 38 non-null float64 11 epl_pm 38 non-null float64 12 epl_dslpm 38 non-null float64 13 epl_totcr 38 non-null float64 14 epl_park 38 non-null float64 15 epl_wlkind 38 non-null float64 16 epl_rail 38 non-null float64 17 epl_road 38 non-null float64 18 epl_airprt 38 non-null float64 19 rpl_ebm_dom4 38 non-null float64 20 rpl_svm 38 non-null float64 21 spl_svm 38 non-null float64 22 ep_bphigh 38 non-null float64 23 ep_asthma 38 non-null float64 24 ep_cancer 38 non-null float64 25 ep_mhlth 38 non-null float64 26 ep_diabetes 38 non-null float64 27 epl_bphigh 38 non-null float64 28 epl_asthma 38 non-null float64 29 epl_cancer 38 non-null float64 30 epl_diabetes 38 non-null float64 31 epl_mhlth 38 non-null float64 32 SHAPE__Length 38 non-null float64 33 SHAPE__Area 38 non-null float64 34 geometry_y 38 non-null geometry 35 epl_minrty 38 non-null float64 36 epl_pov200 38 non-null float64 37 epl_nohsdp 38 non-null float64 38 epl_unemp 38 non-null float64 39 epl_renter 38 non-null float64 40 epl_houbdn 38 non-null float64 41 epl_uninsur 38 non-null float64 42 epl_noint 38 non-null float64 43 epl_age65 38 non-null float64 44 epl_age17 38 non-null float64 45 epl_disabl 38 non-null float64 46 epl_limeng 38 non-null float64 47 epl_mobile 38 non-null float64 48 ep_minrty 38 non-null float64 49 ep_pov200 38 non-null float64 50 ep_nohsdp 38 non-null float64 51 ep_unemp 38 non-null float64 52 ep_renter 38 non-null float64 53 ep_houbdn 38 non-null float64 54 ep_uninsur 38 non-null float64 55 ep_noint 38 non-null float64 56 ep_age65 38 non-null float64 57 ep_age17 38 non-null float64 58 ep_disabl 38 non-null float64 59 ep_limeng 38 non-null float64 60 ep_mobile 38 non-null float64 61 ep_groupq 38 non-null float64 dtypes: float64(53), geometry(1), int64(2), object(6) memory usage: 18.7+ KB\n:::\n# Renaming the columns listed above \n\nEJIdata3.columns = ['state code',\n'county code',\n'affgeoid',\n'geoid',\n'county',\n'location',\n'Total Population',\n 'Day Population',\n 'EJI Rank',\n 'Environmental Burden Rank',\n#environmental variable\n 'Ozone Rank',\n 'PM 2.5 Rank',\n 'Diesel Rank',\n 'Air Toxins Cancer Risk',\n#built environment\n 'Lack of Parks',\n 'Lack of Walkability',\n #transportation\n 'Railways',\n 'High Volume Roads',\n 'Airports',\n 'Proximity to Roads, Rail, Airports',\n# social vulnerability\n 'Social Vulnerability Sum',\n 'Social Vulnerability Rank',\n#health\n '% High Blood Pressure',\n '% Asthma',\n '% Cancer',\n '% Mental Health',\n '% Diabetes',\n 'High Blood Pressure Rank',\n 'Asthma Rank',\n 'Cancer Rank',\n 'Diabetes Rank',\n 'Mental Health Rank',\n #geometric data \n 'SHAPE__Length',\n 'SHAPE__Area',\n 'geometry', \n'Minority Rank',\n 'Below 200% Poverty Rank',\n#demographic indicators (rank)\n'No HS Diploma Rank',\n'Unemployed Rank',\n'Renter Rank',\n'Households Less than $75k Rank',\n'Uninsured Rank',\n'No Internet Rank',\n'Over 65 Rank',\n'Under 17 Rank',\n'Disability Rank',\n'Speak Limited English Rank',\n'Mobile Home Rank',\n#demographic indicadors (percentages)\n '% Minority',\n '% Below Poverty',\n '% No High School Diploma',\n '% Unemployed',\n '% Renter',\n '% Households &lt; $75,000',\n '% Uninsured',\n '% No Internet',\n '% Age 65+',\n '% Age 17 or Younger',\n '% With Disability',\n '% Limited English',\n '% Mobile Home',\n '% Group Quarters',\n  ]\n\n\n# printing a sample of the data with the new column names\nEJIdata3.sample(5)\n\n\n\n\n\n\n\n\n\nstate code\ncounty code\naffgeoid\ngeoid\ncounty\nlocation\nTotal Population\nDay Population\nEJI Rank\nEnvironmental Burden Rank\n...\n% Renter\n% Households &lt; $75,000\n% Uninsured\n% No Internet\n% Age 65+\n% Age 17 or Younger\n% With Disability\n% Limited English\n% Mobile Home\n% Group Quarters\n\n\n\n\n19\n06\n071\n1400000US06071012700\n06071012700\nSan Bernardino\nCensus Tract 127, San Bernardino County, Califor\n3920\n58829\n0.5119\n0.7151\n...\n6.9\n25.2015\n0.9\n11.1\n8.2\n27.6\n5.7\n5.6\n1.4\n0.0\n\n\n8\n06\n071\n1400000US06071001101\n06071001101\nSan Bernardino\nCensus Tract 11.01, San Bernardino County, Calif\n4173\n3145\n0.7491\n0.8856\n...\n17.1\n39.7709\n18.2\n16.7\n7.9\n30.1\n6.5\n22.0\n0.0\n0.0\n\n\n5\n06\n071\n1400000US06071001503\n06071001503\nSan Bernardino\nCensus Tract 15.03, San Bernardino County, Calif\n4126\n1163\n0.9282\n0.9996\n...\n16.3\n55.6008\n23.8\n30.9\n4.9\n35.8\n8.8\n28.4\n8.9\n1.3\n\n\n1\n06\n071\n1400000US06071001703\n06071001703\nSan Bernardino\nCensus Tract 17.03, San Bernardino County, Calif\n5680\n2388\n0.4366\n0.6255\n...\n5.1\n26.3285\n7.0\n5.6\n13.6\n19.4\n7.8\n8.1\n10.8\n0.6\n\n\n22\n06\n071\n1400000US06071001305\n06071001305\nSan Bernardino\nCensus Tract 13.05, San Bernardino County, Calif\n5788\n2935\n0.8973\n0.9813\n...\n14.8\n53.7241\n10.1\n25.5\n4.9\n30.5\n6.4\n17.6\n12.1\n0.9\n\n\n\n\n5 rows × 62 columns",
    "crumbs": [
      "Analysis Sections",
      "2.1 Data Cleaning-EJI Data"
    ]
  },
  {
    "objectID": "Final-notebooks/2.1 EJIData.html#converting-dataframe-to-csv",
    "href": "Final-notebooks/2.1 EJIData.html#converting-dataframe-to-csv",
    "title": "Environmental and Health Data Exploration",
    "section": "Converting DataFrame to CSV",
    "text": "Converting DataFrame to CSV\ncsv to be merged to other data as I move forward with this project\n\n#input: using pandas to covert the merged and filtered dataframe to a csv\n#output: csv created but still needs to be saved\nconvertcsv= pd.DataFrame(EJIdata3)\ncsv_EJIdata = convertcsv.to_csv(index=False)\n\n\n#input: saving the data from the data frame into a the csv file created \n#output: file should appear on the folder\nwith open('Data/EJIselectdata.csv', 'w') as csv_file:\n    convertcsv.to_csv(path_or_buf=csv_file)",
    "crumbs": [
      "Analysis Sections",
      "2.1 Data Cleaning-EJI Data"
    ]
  },
  {
    "objectID": "Final-notebooks/2.1 EJIData.html#converting-dataframe-to-geojson",
    "href": "Final-notebooks/2.1 EJIData.html#converting-dataframe-to-geojson",
    "title": "Environmental and Health Data Exploration",
    "section": "Converting DataFrame to GeoJSON",
    "text": "Converting DataFrame to GeoJSON\n\nimport fiona\n\n\n#Save geodataframe as as geojson file\nEJIdata3.to_file('Data/EJIselectdata.geojson', driver='GeoJSON', mode='w')",
    "crumbs": [
      "Analysis Sections",
      "2.1 Data Cleaning-EJI Data"
    ]
  },
  {
    "objectID": "Final-notebooks/Untitled.html",
    "href": "Final-notebooks/Untitled.html",
    "title": "Health & Environmental Impacts of Warehousing in Ontario, CA",
    "section": "",
    "text": "pip install contextily\n\nRequirement already satisfied: contextily in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (1.3.0)\nRequirement already satisfied: geopy in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from contextily) (2.4.0)\nRequirement already satisfied: matplotlib in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from contextily) (3.7.2)\nRequirement already satisfied: mercantile in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from contextily) (1.2.1)\nRequirement already satisfied: pillow in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from contextily) (10.0.0)\nRequirement already satisfied: rasterio in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from contextily) (1.3.8)\nRequirement already satisfied: requests in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from contextily) (2.31.0)\nRequirement already satisfied: joblib in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from contextily) (1.3.2)\nRequirement already satisfied: xyzservices in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from contextily) (2023.7.0)\nRequirement already satisfied: geographiclib&lt;3,&gt;=1.52 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from geopy-&gt;contextily) (1.52)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from matplotlib-&gt;contextily) (1.1.0)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from matplotlib-&gt;contextily) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from matplotlib-&gt;contextily) (4.42.1)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from matplotlib-&gt;contextily) (1.4.5)\nRequirement already satisfied: numpy&gt;=1.20 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from matplotlib-&gt;contextily) (1.24.4)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from matplotlib-&gt;contextily) (23.1)\nRequirement already satisfied: pyparsing&lt;3.1,&gt;=2.3.1 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from matplotlib-&gt;contextily) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from matplotlib-&gt;contextily) (2.8.2)\nRequirement already satisfied: click&gt;=3.0 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from mercantile-&gt;contextily) (8.1.7)\nRequirement already satisfied: affine in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from rasterio-&gt;contextily) (2.4.0)\nRequirement already satisfied: attrs in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from rasterio-&gt;contextily) (23.1.0)\nRequirement already satisfied: certifi in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from rasterio-&gt;contextily) (2023.7.22)\nRequirement already satisfied: cligj&gt;=0.5 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from rasterio-&gt;contextily) (0.7.2)\nRequirement already satisfied: snuggs&gt;=1.4.1 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from rasterio-&gt;contextily) (1.4.7)\nRequirement already satisfied: click-plugins in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from rasterio-&gt;contextily) (1.1.1)\nRequirement already satisfied: setuptools in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from rasterio-&gt;contextily) (68.1.2)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from requests-&gt;contextily) (3.2.0)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from requests-&gt;contextily) (3.4)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from requests-&gt;contextily) (1.26.15)\nRequirement already satisfied: six&gt;=1.5 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;contextily) (1.16.0)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\npip install GDAL\n\nRequirement already satisfied: GDAL in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (3.7.0)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\npip install fiona\n\nRequirement already satisfied: fiona in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (1.9.4)\nRequirement already satisfied: attrs&gt;=19.2.0 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from fiona) (23.1.0)\nRequirement already satisfied: certifi in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from fiona) (2023.7.22)\nRequirement already satisfied: click~=8.0 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from fiona) (8.1.7)\nRequirement already satisfied: click-plugins&gt;=1.0 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from fiona) (1.1.1)\nRequirement already satisfied: cligj&gt;=0.5 in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from fiona) (0.7.2)\nRequirement already satisfied: six in /Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages (from fiona) (1.16.0)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n%matplotlib inline\n\nimport contextily as cx\nimport geopandas\nimport rasterio\nfrom rasterio.plot import show as rioshow\nimport matplotlib.pyplot as plt\nfrom geodatasets import get_path\n\n\nimport geoviews as gv\nimport geoviews.tile_sources as gvts\n\n\ndata_url = \"https://ndownloader.figshare.com/files/20232174\"\n\n\ndb = geopandas.read_file(data_url)\n\n\n\nax = db.plot(color=\"red\", figsize=(9, 9))\ncx.add_basemap(ax, crs=db.crs)\n\nUnidentifiedImageError: cannot identify image file &lt;_io.BytesIO object at 0x1775ec4f0&gt;\n\n\n\n\n\n\n\n\n\n\nzaragoza = db.query(\"city_id == 'ci122'\")\nax = zaragoza.plot(facecolor=\"none\",\n                   edgecolor=\"red\",\n                   linewidth=2\n                  )\ncx.add_basemap(ax,\n               crs=zaragoza.crs.to_string(),\n               source=cx.providers.CartoDB.Voyager\n              )\n\n\n\n\n\n\n\n\n\ncx.providers.OpenStreetMap\n\n\n        \n        \n            \n                \n                    xyzservices.Bunch\n                    7 items\n                \n                \n                    \n                        \n            \n                \n                Mapnik xyzservices.TileProvider\n                \n                    \n        \n        \n            \n                \n                    xyzservices.TileProvider\n                    OpenStreetMap.Mapnik\n                \n                \n                    \n                        urlhttps://tile.openstreetmap.org/{z}/{x}/{y}.pngmax_zoom19html_attribution© OpenStreetMap contributorsattribution(C) OpenStreetMap contributors\n                    \n                \n            \n        \n        \n                \n            \n            \n            \n                \n                DE xyzservices.TileProvider\n                \n                    \n        \n        \n            \n                \n                    xyzservices.TileProvider\n                    OpenStreetMap.DE\n                \n                \n                    \n                        urlhttps://tile.openstreetmap.de/{z}/{x}/{y}.pngmax_zoom18html_attribution© OpenStreetMap contributorsattribution(C) OpenStreetMap contributors\n                    \n                \n            \n        \n        \n                \n            \n            \n            \n                \n                CH xyzservices.TileProvider\n                \n                    \n        \n        \n            \n                \n                    xyzservices.TileProvider\n                    OpenStreetMap.CH\n                \n                \n                    \n                        urlhttps://tile.osm.ch/switzerland/{z}/{x}/{y}.pngmax_zoom18html_attribution© OpenStreetMap contributorsattribution(C) OpenStreetMap contributorsbounds[[45, 5], [48, 11]]\n                    \n                \n            \n        \n        \n                \n            \n            \n            \n                \n                France xyzservices.TileProvider\n                \n                    \n        \n        \n            \n                \n                    xyzservices.TileProvider\n                    OpenStreetMap.France\n                \n                \n                    \n                        urlhttps://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.pngmax_zoom20html_attribution© OpenStreetMap France | © OpenStreetMap contributorsattribution(C) OpenStreetMap France | (C) OpenStreetMap contributors\n                    \n                \n            \n        \n        \n                \n            \n            \n            \n                \n                HOT xyzservices.TileProvider\n                \n                    \n        \n        \n            \n                \n                    xyzservices.TileProvider\n                    OpenStreetMap.HOT\n                \n                \n                    \n                        urlhttps://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.pngmax_zoom19html_attribution© OpenStreetMap contributors, Tiles style by Humanitarian OpenStreetMap Team hosted by OpenStreetMap Franceattribution(C) OpenStreetMap contributors, Tiles style by Humanitarian OpenStreetMap Team hosted by OpenStreetMap France\n                    \n                \n            \n        \n        \n                \n            \n            \n            \n                \n                BZH xyzservices.TileProvider\n                \n                    \n        \n        \n            \n                \n                    xyzservices.TileProvider\n                    OpenStreetMap.BZH\n                \n                \n                    \n                        urlhttps://tile.openstreetmap.bzh/br/{z}/{x}/{y}.pngmax_zoom19html_attribution© OpenStreetMap contributors, Tiles courtesy of Breton OpenStreetMap Teamattribution(C) OpenStreetMap contributors, Tiles courtesy of Breton OpenStreetMap Teambounds[[46.2, -5.5], [50, 0.7]]\n                    \n                \n            \n        \n        \n                \n            \n            \n            \n                \n                BlackAndWhite xyzservices.TileProvider\n                \n                    \n        \n        \n            \n                \n                    xyzservices.TileProvider\n                    OpenStreetMap.BlackAndWhite\n                \n                \n                    \n                        urlhttp://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.pngmax_zoom18attribution(C) OpenStreetMap contributorshtml_attribution© OpenStreetMap contributors\n                    \n                \n            \n        \n        \n                \n            \n            \n                    \n                \n            \n        \n        \n\n\n\n# Display the gif file\n\nfrom IPython.display import Image\nfrom IPython.display import display\n\nwith open('../Images/Warehouses.gif', \"rb\") as f:\n    display(Image(data=f.read(), format='gif'))"
  },
  {
    "objectID": "Final-notebooks/5. Analysis.html",
    "href": "Final-notebooks/5. Analysis.html",
    "title": "Analysis - part 1",
    "section": "",
    "text": "state code\ncounty code\naffgeoid\ngeoid\ncounty\nlocation\nTotal Population\nDay Population\nEJI Rank\nEnvironmental Burden Rank\n...\n% Households &lt; $75,000\n% Uninsured\n% No Internet\n% Age 65+\n% Age 17 or Younger\n% With Disability\n% Limited English\n% Mobile Home\n% Group Quarters\ngeometry\n\n\n\n\n0\n06\n071\n1400000US06071001307\n06071001307\nSan Bernardino\nCensus Tract 13.07, San Bernardino County, Calif\n4212\n2345\n0.6649\n0.8834\n...\n39.6300\n10.6\n14.3\n9.1\n26.3\n8.9\n10.3\n0.0\n0.2\nPOLYGON ((-117.62857 34.09215, -117.62856 34.0...\n\n\n1\n06\n071\n1400000US06071001703\n06071001703\nSan Bernardino\nCensus Tract 17.03, San Bernardino County, Calif\n5680\n2388\n0.4366\n0.6255\n...\n26.3285\n7.0\n5.6\n13.6\n19.4\n7.8\n8.1\n10.8\n0.6\nPOLYGON ((-117.66764 34.03029, -117.66760 34.0...\n\n\n2\n06\n071\n1400000US06071001812\n06071001812\nSan Bernardino\nCensus Tract 18.12, San Bernardino County, Calif\n3477\n2913\n0.9054\n0.9883\n...\n53.0762\n13.0\n26.5\n11.1\n26.0\n11.4\n18.2\n0.0\n1.8\nPOLYGON ((-117.65077 34.04925, -117.65074 34.0...\n\n\n3\n06\n071\n1400000US06071001002\n06071001002\nSan Bernardino\nCensus Tract 10.02, San Bernardino County, Calif\n5929\n1960\n0.6587\n0.7748\n...\n49.3195\n13.9\n24.3\n6.4\n30.3\n7.2\n13.3\n0.0\n0.0\nPOLYGON ((-117.68082 34.07406, -117.68082 34.0...\n\n\n4\n06\n071\n1400000US06071001310\n06071001310\nSan Bernardino\nCensus Tract 13.10, San Bernardino County, Calif\n6193\n2689\n0.7382\n0.9542\n...\n34.8688\n6.4\n13.6\n12.1\n27.3\n10.2\n12.5\n0.9\n3.2\nPOLYGON ((-117.64145 34.08708, -117.64144 34.0...\n\n\n\n\n5 rows × 62 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelement_type\nosmid\nbuilding\ngeometry\n\n\n\n\n0\nnode\n521362425\nhouse\nPOINT (-117.59008 34.02953)\n\n\n1\nnode\n521362429\nhouse\nPOINT (-117.59027 34.02946)\n\n\n2\nnode\n521362433\nhouse\nPOINT (-117.59026 34.02885)\n\n\n3\nnode\n521362436\nhouse\nPOINT (-117.59004 34.02874)\n\n\n4\nnode\n521362440\nhouse\nPOINT (-117.59010 34.02860)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nAcres\nYear built\nBuilding sq.ft.\n\n\n\n\n0\n0\n275\n2021\n7778022\n\n\n1\n1\n225\n2003\n6381893\n\n\n2\n2\n151\n2016\n4273702\n\n\n3\n4\n106\n2018\n3014158\n\n\n4\n5\n106\n1941\n2990190\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\nOBJECTID\nOwnerName\nLandValue\nImprovemen\n...\nZoningDesc\nJurisdicti\nJurisdic_1\nBaseYear\nPageMap\nAssessDesc\nAssessClas\nShape__Are\nShape__Len\ngeometry\n\n\n\n\n0\n0\n23812175\ndistribution warehouse\n1996\n93\n2646053\n157685\nTOYOTA MOTOR SALES U S A INC\n51,510,534\n30,864,960\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1993\n23812\nDISTRIBUTION WAREHOUSE\nCOMMERCIAL\n552237.437500\n3009.581112\nPOLYGON ((-117.557958732513 34.047990601161, -...\n\n\n1\n1\n21126319\ntransit warehouse (truck terminal)\n1992\n70\n1986082\n123022\nUPS WORLDWIDE FORWARDING INC\n25,587,357\n54,634,664\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n21126\nTRANSIT WAREHOUSE (TRUCK TERMINAL)\nINDUSTRIAL\n414508.363281\n2895.298085\nPOLYGON ((-117.578957441574 34.0481115516985, ...\n\n\n2\n2\n107311124\ndistribution warehouse\n2021\n62\n1748594\n685625\nOLV PHASE II LP\n65,790,000\n75,500,000\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n107311\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n364429.617188\n2738.202572\nPOLYGON ((-117.606397404497 33.9903502473197, ...\n\n\n3\n3\n21121315\nstorage warehouse\n1992\n61\n1723857\n121965\nUPS WORLDWIDE FORWARDING INC\n24,185,220\n24,451,343\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n21121\nSTORAGE WAREHOUSE\nCOMMERCIAL\n359815.906250\n2461.426213\nPOLYGON ((-117.583135956016 34.0519451467786, ...\n\n\n4\n4\n23808145\ndistribution warehouse\n1980\n59\n1681858\n157834\nCOSTCO WHOLESALE CORPORATION\n76,500,000\n147,900,000\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n23808\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n351134.007812\n2355.939087\nPOLYGON ((-117.532885448579 34.0625201898649, ...\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\nOBJECTID\nOwnerName\nLandValue\nImprovemen\nPersonalPr\n...\nZoningDesc\nJurisdicti\nJurisdic_1\nBaseYear\nPageMap\nAssessDesc\nAssessClas\nShape__Are\nShape__Len\ngeometry\n\n\n\n\n0\n023812175\ndistribution warehouse\n1996\n93\n2646053\n157685\nTOYOTA MOTOR SALES U S A INC\n51,510,534\n30,864,960\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1993\n023812\nDISTRIBUTION WAREHOUSE\nCOMMERCIAL\n552237.437500\n3009.581112\nPOLYGON ((-117.55796 34.04799, -117.55689 34.0...\n\n\n1\n021126319\ntransit warehouse (truck terminal)\n1992\n70\n1986082\n123022\nUPS WORLDWIDE FORWARDING INC\n25,587,357\n54,634,664\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021126\nTRANSIT WAREHOUSE (TRUCK TERMINAL)\nINDUSTRIAL\n414508.363281\n2895.298085\nPOLYGON ((-117.57896 34.04811, -117.57893 34.0...\n\n\n2\n107311124\ndistribution warehouse\n2021\n62\n1748594\n685625\nOLV PHASE II LP\n65,790,000\n75,500,000\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n107311\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n364429.617188\n2738.202572\nPOLYGON ((-117.60640 33.99035, -117.60638 33.9...\n\n\n3\n021121315\nstorage warehouse\n1992\n61\n1723857\n121965\nUPS WORLDWIDE FORWARDING INC\n24,185,220\n24,451,343\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021121\nSTORAGE WAREHOUSE\nCOMMERCIAL\n359815.906250\n2461.426213\nPOLYGON ((-117.58314 34.05195, -117.58208 34.0...\n\n\n4\n023808145\ndistribution warehouse\n1980\n59\n1681858\n157834\nCOSTCO WHOLESALE CORPORATION\n76,500,000\n147,900,000\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n023808\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n351134.007812\n2355.939087\nPOLYGON ((-117.53289 34.06252, -117.52727 34.0...\n\n\n\n\n5 rows × 26 columns",
    "crumbs": [
      "Analysis Sections",
      "5 Analysis"
    ]
  },
  {
    "objectID": "Final-notebooks/5. Analysis.html#loading-data",
    "href": "Final-notebooks/5. Analysis.html#loading-data",
    "title": "Analysis - part 1",
    "section": "",
    "text": "state code\ncounty code\naffgeoid\ngeoid\ncounty\nlocation\nTotal Population\nDay Population\nEJI Rank\nEnvironmental Burden Rank\n...\n% Households &lt; $75,000\n% Uninsured\n% No Internet\n% Age 65+\n% Age 17 or Younger\n% With Disability\n% Limited English\n% Mobile Home\n% Group Quarters\ngeometry\n\n\n\n\n0\n06\n071\n1400000US06071001307\n06071001307\nSan Bernardino\nCensus Tract 13.07, San Bernardino County, Calif\n4212\n2345\n0.6649\n0.8834\n...\n39.6300\n10.6\n14.3\n9.1\n26.3\n8.9\n10.3\n0.0\n0.2\nPOLYGON ((-117.62857 34.09215, -117.62856 34.0...\n\n\n1\n06\n071\n1400000US06071001703\n06071001703\nSan Bernardino\nCensus Tract 17.03, San Bernardino County, Calif\n5680\n2388\n0.4366\n0.6255\n...\n26.3285\n7.0\n5.6\n13.6\n19.4\n7.8\n8.1\n10.8\n0.6\nPOLYGON ((-117.66764 34.03029, -117.66760 34.0...\n\n\n2\n06\n071\n1400000US06071001812\n06071001812\nSan Bernardino\nCensus Tract 18.12, San Bernardino County, Calif\n3477\n2913\n0.9054\n0.9883\n...\n53.0762\n13.0\n26.5\n11.1\n26.0\n11.4\n18.2\n0.0\n1.8\nPOLYGON ((-117.65077 34.04925, -117.65074 34.0...\n\n\n3\n06\n071\n1400000US06071001002\n06071001002\nSan Bernardino\nCensus Tract 10.02, San Bernardino County, Calif\n5929\n1960\n0.6587\n0.7748\n...\n49.3195\n13.9\n24.3\n6.4\n30.3\n7.2\n13.3\n0.0\n0.0\nPOLYGON ((-117.68082 34.07406, -117.68082 34.0...\n\n\n4\n06\n071\n1400000US06071001310\n06071001310\nSan Bernardino\nCensus Tract 13.10, San Bernardino County, Calif\n6193\n2689\n0.7382\n0.9542\n...\n34.8688\n6.4\n13.6\n12.1\n27.3\n10.2\n12.5\n0.9\n3.2\nPOLYGON ((-117.64145 34.08708, -117.64144 34.0...\n\n\n\n\n5 rows × 62 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelement_type\nosmid\nbuilding\ngeometry\n\n\n\n\n0\nnode\n521362425\nhouse\nPOINT (-117.59008 34.02953)\n\n\n1\nnode\n521362429\nhouse\nPOINT (-117.59027 34.02946)\n\n\n2\nnode\n521362433\nhouse\nPOINT (-117.59026 34.02885)\n\n\n3\nnode\n521362436\nhouse\nPOINT (-117.59004 34.02874)\n\n\n4\nnode\n521362440\nhouse\nPOINT (-117.59010 34.02860)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nAcres\nYear built\nBuilding sq.ft.\n\n\n\n\n0\n0\n275\n2021\n7778022\n\n\n1\n1\n225\n2003\n6381893\n\n\n2\n2\n151\n2016\n4273702\n\n\n3\n4\n106\n2018\n3014158\n\n\n4\n5\n106\n1941\n2990190\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\nOBJECTID\nOwnerName\nLandValue\nImprovemen\n...\nZoningDesc\nJurisdicti\nJurisdic_1\nBaseYear\nPageMap\nAssessDesc\nAssessClas\nShape__Are\nShape__Len\ngeometry\n\n\n\n\n0\n0\n23812175\ndistribution warehouse\n1996\n93\n2646053\n157685\nTOYOTA MOTOR SALES U S A INC\n51,510,534\n30,864,960\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1993\n23812\nDISTRIBUTION WAREHOUSE\nCOMMERCIAL\n552237.437500\n3009.581112\nPOLYGON ((-117.557958732513 34.047990601161, -...\n\n\n1\n1\n21126319\ntransit warehouse (truck terminal)\n1992\n70\n1986082\n123022\nUPS WORLDWIDE FORWARDING INC\n25,587,357\n54,634,664\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n21126\nTRANSIT WAREHOUSE (TRUCK TERMINAL)\nINDUSTRIAL\n414508.363281\n2895.298085\nPOLYGON ((-117.578957441574 34.0481115516985, ...\n\n\n2\n2\n107311124\ndistribution warehouse\n2021\n62\n1748594\n685625\nOLV PHASE II LP\n65,790,000\n75,500,000\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n107311\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n364429.617188\n2738.202572\nPOLYGON ((-117.606397404497 33.9903502473197, ...\n\n\n3\n3\n21121315\nstorage warehouse\n1992\n61\n1723857\n121965\nUPS WORLDWIDE FORWARDING INC\n24,185,220\n24,451,343\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n21121\nSTORAGE WAREHOUSE\nCOMMERCIAL\n359815.906250\n2461.426213\nPOLYGON ((-117.583135956016 34.0519451467786, ...\n\n\n4\n4\n23808145\ndistribution warehouse\n1980\n59\n1681858\n157834\nCOSTCO WHOLESALE CORPORATION\n76,500,000\n147,900,000\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n23808\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n351134.007812\n2355.939087\nPOLYGON ((-117.532885448579 34.0625201898649, ...\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\nOBJECTID\nOwnerName\nLandValue\nImprovemen\nPersonalPr\n...\nZoningDesc\nJurisdicti\nJurisdic_1\nBaseYear\nPageMap\nAssessDesc\nAssessClas\nShape__Are\nShape__Len\ngeometry\n\n\n\n\n0\n023812175\ndistribution warehouse\n1996\n93\n2646053\n157685\nTOYOTA MOTOR SALES U S A INC\n51,510,534\n30,864,960\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1993\n023812\nDISTRIBUTION WAREHOUSE\nCOMMERCIAL\n552237.437500\n3009.581112\nPOLYGON ((-117.55796 34.04799, -117.55689 34.0...\n\n\n1\n021126319\ntransit warehouse (truck terminal)\n1992\n70\n1986082\n123022\nUPS WORLDWIDE FORWARDING INC\n25,587,357\n54,634,664\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021126\nTRANSIT WAREHOUSE (TRUCK TERMINAL)\nINDUSTRIAL\n414508.363281\n2895.298085\nPOLYGON ((-117.57896 34.04811, -117.57893 34.0...\n\n\n2\n107311124\ndistribution warehouse\n2021\n62\n1748594\n685625\nOLV PHASE II LP\n65,790,000\n75,500,000\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n107311\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n364429.617188\n2738.202572\nPOLYGON ((-117.60640 33.99035, -117.60638 33.9...\n\n\n3\n021121315\nstorage warehouse\n1992\n61\n1723857\n121965\nUPS WORLDWIDE FORWARDING INC\n24,185,220\n24,451,343\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021121\nSTORAGE WAREHOUSE\nCOMMERCIAL\n359815.906250\n2461.426213\nPOLYGON ((-117.58314 34.05195, -117.58208 34.0...\n\n\n4\n023808145\ndistribution warehouse\n1980\n59\n1681858\n157834\nCOSTCO WHOLESALE CORPORATION\n76,500,000\n147,900,000\n0\n...\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n023808\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n351134.007812\n2355.939087\nPOLYGON ((-117.53289 34.06252, -117.52727 34.0...\n\n\n\n\n5 rows × 26 columns",
    "crumbs": [
      "Analysis Sections",
      "5 Analysis"
    ]
  },
  {
    "objectID": "Final-notebooks/5. Analysis.html#a.-warehouses-in-ontario",
    "href": "Final-notebooks/5. Analysis.html#a.-warehouses-in-ontario",
    "title": "Analysis - part 1",
    "section": "A. Warehouses in Ontario",
    "text": "A. Warehouses in Ontario\n\nInteractive Bar Chart - Warehouses over time\n\n\n                                                \n\n\nThe interactive stacked bar chart above shows the acres of warehouses built over time since 1911.\nWe can observe the growth of warehousing in Ontario through this chart. Warehouse acreage has increased steadily over the years since the late 1900s.\n\n\n                                                \n\n\nThe interactive stacked bar chart above shows the building sq.ft of each warehouse in years.\nWe can see that the total sq.ft.of each warehouse have been increasing over the years.\n\n\nPie chart - Warehouse Types\n\n\n\n\n\n\n\n\n\nThe pie chart above shows the distribution of warehouses based on the type of warehouse for Ontario city.\nThis chart tells us that the most common type of warehouse is categorized as ‘storage’, followed by ‘distribution’ warehouses and ‘light industrial’ types.",
    "crumbs": [
      "Analysis Sections",
      "5 Analysis"
    ]
  },
  {
    "objectID": "Final-notebooks/5. Analysis.html#b.-analysis---environmental-health-and-social-data",
    "href": "Final-notebooks/5. Analysis.html#b.-analysis---environmental-health-and-social-data",
    "title": "Analysis - part 1",
    "section": "B. Analysis - Environmental, Health, and Social Data",
    "text": "B. Analysis - Environmental, Health, and Social Data\n\nCharts\n\nSimple bar chart\nEnvironmental data\n\n\n\n\n\n\n\n\n\n\ngeoid\nOzone Rank\nPM 2.5 Rank\nDiesel Rank\nAir Toxins Cancer Risk\n\n\n\n\n16\n06071001903\n0.9865\n0.9955\n0.7307\n0.8310\n\n\n36\n06071001906\n0.9935\n0.9955\n0.8541\n0.8709\n\n\n17\n06071001905\n0.9894\n0.9953\n0.8064\n0.8851\n\n\n29\n06071002206\n0.9938\n0.9948\n0.8882\n0.9165\n\n\n18\n06071001809\n0.9930\n0.9947\n0.8919\n0.9207\n\n\n\n\n\n\n\n\n\n\ngeoid                          inf\nOzone Rank                0.992105\nPM 2.5 Rank               0.984326\nDiesel Rank               0.816232\nAir Toxins Cancer Risk    0.819632\ndtype: float64\n\n\n\n\n\n\n\n\n\n\n\nThe static bar chart above provides a visualization of the levels of different types of pollutants for the average rates for all of the census tracts for Ontario. The pollutants are shown as percentiles/ranks.\nThe pollutants included in this chart are: - Ozone - PM 2.5 - Diesel - Air toxics cancer risk (based on continous exposure to pollutants)\n\n\nInteractive bar charts with plotly - Environmental data (by census tracts)\n\nOzone pollution\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1802831364.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n                                                \n\n\nWe chose not to use color for the Ozone chart because the difference between census tracts is very minimal.\nAll of the census tracts in Ontario have a high risk of exposure to Ozone pollution.\nThis is an interactive chart that allows users to hover over the bars to see the values for each of the cencus tracts.\n\n\nPM 2.5 pollution\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/3292706777.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n                                                \n\n\nThe PM 2.5 chart also showed small differences between census tracts.\nAll census tracts in Ontario have a high risk of PM 2.5 pollution exposure.\nThis is an interactive chart that allows users to hover over the bars to see the values for each of the cencus tracts.\n\n\nDiesel pollution\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/2099293439.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n                                                \n\n\nThe Diesel rank chart does show a lot more variation between census tracts. This is likely due to many factors, including the proximity to high occupancy roads or highways, that each census tract has. Despite these differences, about half of the census tracts face very high risk of Diesel pollution exposure, while the rest of the tracts have high and moderate levels of Diesel exposure.\nThis is an interactive chart that allows users to hover over the bars to see the values for each of the cencus tracts.\n\n\nCancer risk - air toxins exposure\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/3736129226.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n                                                \n\n\nThe cancer risk chart shows in which census tracts people have the highest risk of developing cancer due to continuous exposure to air pollutants.\nThis is an interactive chart that allows users to hover over the bars to see the values for each of the cencus tracts.\n\n\n\n\nMaps - environmental, health, and social data\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/geopandas/plotting.py:675: RuntimeWarning:\n\nMore than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1981495103.py:44: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe used a loop to create the maps above to analyze a handful of environmental, health, and social metrics and their relationship to warehouse locations in Ontario. Below are some observations from these maps for each variable.\n\nTotal population\nThe majority of the warehouses are located in census tracts with lower population levels. #### Day population The day population is highest for the census tracts where the majority of the warehouses are in. That means that the people who work in Ontario are directly impacted by the warehouses through geographic proximity. #### EJI rank The EJI rank measures overal environmental justice for communities. The map shows that the census tracts near warehouses face envrionmental justice concerns. #### Environmental burden rank Census tracts near or with warehouses have higher environmental burden ranks. #### PM 2.5 rank From the chart above, we know that PM 2.5 is very similar for all census tracts so this map doesn’t tell us too much information. #### Diesel rank The map shows a correlation between warehouses and diesel pollution risk #### Air toxics cancer risk There seems to be some correlation between air toxic cancer risk and the location of warehouses but the correlation is not strong since other census tracts with limited warehouse presence also have high air toxic cancer risk levels. #### Lack of parks This map might help explian the Air toxics cancer risk anomaly explained above since the census tracts with higher levels of air toxics cancer risk seem to lack parks. #### Lack of walkability No notable observations for this variable. #### railways This map makes sense since warehouses need access to railway infrastructure. The higher levels for the railways were inside the census tracts with hihgh numbers of warehouses. #### high volume roads Similarly, census tracts with high volume roads were mostly next to or in the census tracts with the most warehouse precense. #### airports Almost all the warehouses in Ontario are in census tracts with high levels of proximity to airports. #### proximity to roads, rail, airports This variable adds up the previous 3 variables. The map shows that the most connected (rails, roads, airports) census tracts are those that have a hogh concentration of warehouses. #### social vulnerability rank This variable comes from the Social Vulnerability Index published by the CDC. The map shows that many of the residents in Ontario have a high SVI score, but there’s not a clear connetion to warehouse location. This could be due to the fact that most people in Ontario don’t tend to live in census tracts with high concentrations of warehouses, but they might work there and spend a big chunk of the life directly exposed to the negative effects of warehouses.\nThe following variables might be similarly impacted by population (where people live vs. where they work, play, study, etc.). For example, many people might asthma in one census tract without any warehouses. From this data, we don’t know if the majority of the people with asthma frequent the census tracts with high concentrations of warehouses. More investigation is needed to understand if there’s a link between warehouses and health metrics but it’s not likely possible to do since that kind of detailed health data is typically not publicly accessible. #### % high blood pressure Some relationship between warehouses and people with high blood pressure #### % asthma Varied relationship between warehouses and people with asthma #### % cancer Some relationship between warehouses and people with cancer #### % mental health Limited relationship between warehouses and mental health #### % diabetes\nVaried relationship between warehouses and people with diabetes #### high blood pressure rank Varied relationship between warehouses and people with high blood pressure (percentile) #### asthma rank Limited relationship between warehouses and people with asthma (percentile) #### cancer rank Varied relationship between warehouses and people with cancer (percentile) #### diabetes rank Some relationship between warehouses and people with diabetes (percentile) #### mental health rank Limited relationship between warehouses and mental health (percentile)\n\n\n\nThe following variables were added into the loop per recommendations by our classmates to consider demographic data:\n\nminority rank,\nbelow 200% poverty rank,\nNo hs diploma rank,\nUnemployed rank,\nRenter rank,\nHouseholds less than $75k rank,\nUninsured rank,\nNo internet rank,\nOver 65 rank,\nUnder 17 rank,\nDisability rank,\nSpeak limited english rank,\nMobile home rank\n\nThese variables make up the SVI (which was previously included in our analysis). For future analysis, we want to move this demographic data up to our introduction to help paint a picture of who lives in Ontario.\nNow we have the static maps of all health, air pollution, and some EJ variables that showing their ranks and relationships with warehouses.\n\n\nCreating an Interactive Map of Desiel emisions in Ontario\nOften times, its useful for urban planners to see the spatial relationships between infrastructture, ammentieies, and environmental conditions. To do this, we can use the Folium library along with our census tract data to create an interactive map. For this project, we would like to see the spatial relation between desiel emisions, the airport, public parks, and schools. Let’s start by bringing in all our necessary data and python libraries.\nNow using Folium, we can begin to explore the data that we have. We have to reproject the parks files as well, to keep in the system projection system as the other data.\n\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48889/1694539781.py:5: UserWarning:\n\nGeometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n\n/Users/mianbao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/geopandas/geodataframe.py:1538: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nThis interactive map can tell us about a select variable (in this case ‘Diesel Rank’) and the connection of that rank to the locations of schools, parks, and the Ontario airport.",
    "crumbs": [
      "Analysis Sections",
      "5 Analysis"
    ]
  },
  {
    "objectID": "Final-notebooks/5. Analysis.html#c.-analysis---land-uses",
    "href": "Final-notebooks/5. Analysis.html#c.-analysis---land-uses",
    "title": "Analysis - part 1",
    "section": "C. Analysis - Land Uses",
    "text": "C. Analysis - Land Uses\n\nBasic bar chart - Ontario land use data\n\n\n\n\n\n\n\n\n\nThe bar chart above shows the counts for each type of land uses that are close to the Ontario airport.\nThe chart tells is that the most common types of land uses in Ontario are residential, followed by commercial and industrial land uses.\n\n\nImproved bar chart - Ontario land use data\n\n\n\n\n\n\n\n\n\nIn the chart above, we added a title, labels for the y and x axis, and adjusted the size of the chart to make it more readable.\n\n\nInteractive bar chart - Ontario land use data\n\n\n                                                \n\n\nThe chart aove is an interactive bar chart showing the counts of all building types in Ontario.\n\n\nLand Uses Maps/Plots\nMaps to visualize the building land uses in Ontario city.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the map above, we can see the buildings categorized as ‘industrial’ or ‘warehouse’.",
    "crumbs": [
      "Analysis Sections",
      "5 Analysis"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "On this about page, you might want to add more information about yourself, the project, or course. Any helpful context could go here!\nMy name is Nick Hand, the instructor for the course. You can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2023.\nAdipisicing proident minim non non dolor quis. Pariatur in ipsum aliquip magna. Qui ad aliqua nulla excepteur dolor nostrud quis nisi. Occaecat proident eiusmod in cupidatat. Elit qui laboris sit aliquip proident dolore. Officia commodo commodo in eiusmod aliqua sint cupidatat consectetur aliqua sint reprehenderit.\nOccaecat incididunt esse et elit adipisicing sit est cupidatat consequat. Incididunt exercitation amet dolor non sit anim veniam veniam sint velit. Labore irure reprehenderit ut esse. Minim quis commodo nisi voluptate."
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Altair and Hvplot Charts",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive charts produced using Altair and hvPlot."
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in Altair",
    "text": "Example: Measles Incidence in Altair\nFirst, let’s load the data for measles incidence in wide format:\n\n\nCode\nurl = \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/measles_incidence.csv\"\ndata = pd.read_csv(url, skiprows=2, na_values=\"-\")\n\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nWEEK\nALABAMA\nALASKA\nARIZONA\nARKANSAS\nCALIFORNIA\nCOLORADO\nCONNECTICUT\nDELAWARE\n...\nSOUTH DAKOTA\nTENNESSEE\nTEXAS\nUTAH\nVERMONT\nVIRGINIA\nWASHINGTON\nWEST VIRGINIA\nWISCONSIN\nWYOMING\n\n\n\n\n0\n1928\n1\n3.67\nNaN\n1.90\n4.11\n1.38\n8.38\n4.50\n8.58\n...\n5.69\n22.03\n1.18\n0.4\n0.28\nNaN\n14.83\n3.36\n1.54\n0.91\n\n\n1\n1928\n2\n6.25\nNaN\n6.40\n9.91\n1.80\n6.02\n9.00\n7.30\n...\n6.57\n16.96\n0.63\nNaN\n0.56\nNaN\n17.34\n4.19\n0.96\nNaN\n\n\n2\n1928\n3\n7.95\nNaN\n4.50\n11.15\n1.31\n2.86\n8.81\n15.88\n...\n2.04\n24.66\n0.62\n0.2\n1.12\nNaN\n15.67\n4.19\n4.79\n1.36\n\n\n3\n1928\n4\n12.58\nNaN\n1.90\n13.75\n1.87\n13.71\n10.40\n4.29\n...\n2.19\n18.86\n0.37\n0.2\n6.70\nNaN\n12.77\n4.66\n1.64\n3.64\n\n\n4\n1928\n5\n8.03\nNaN\n0.47\n20.79\n2.38\n5.13\n16.80\n5.58\n...\n3.94\n20.05\n1.57\n0.4\n6.70\nNaN\n18.83\n7.37\n2.91\n0.91\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nThen, use the pandas.melt() function to convert it to tidy format:\n\n\nCode\nannual = data.drop(\"WEEK\", axis=1)\nmeasles = annual.groupby(\"YEAR\").sum().reset_index()\nmeasles = measles.melt(id_vars=\"YEAR\", var_name=\"state\", value_name=\"incidence\")\n\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nstate\nincidence\n\n\n\n\n0\n1928\nALABAMA\n334.99\n\n\n1\n1929\nALABAMA\n111.93\n\n\n2\n1930\nALABAMA\n157.00\n\n\n3\n1931\nALABAMA\n337.29\n\n\n4\n1932\nALABAMA\n10.21\n\n\n\n\n\n\n\n\nFinally, load altair:\n\nimport altair as alt\n\nAnd generate our final data viz:\n\n# use a custom color map\ncolormap = alt.Scale(\n    domain=[0, 100, 200, 300, 1000, 3000],\n    range=[\n        \"#F0F8FF\",\n        \"cornflowerblue\",\n        \"mediumseagreen\",\n        \"#FFEE00\",\n        \"darkorange\",\n        \"firebrick\",\n    ],\n    type=\"sqrt\",\n)\n\n# Vertical line for vaccination year\nthreshold = pd.DataFrame([{\"threshold\": 1963}])\n\n# plot YEAR vs state, colored by incidence\nchart = (\n    alt.Chart(measles)\n    .mark_rect()\n    .encode(\n        x=alt.X(\"YEAR:O\", axis=alt.Axis(title=None, ticks=False)),\n        y=alt.Y(\"state:N\", axis=alt.Axis(title=None, ticks=False)),\n        color=alt.Color(\"incidence:Q\", sort=\"ascending\", scale=colormap, legend=None),\n        tooltip=[\"state\", \"YEAR\", \"incidence\"],\n    )\n    .properties(width=650, height=500)\n)\n\nrule = alt.Chart(threshold).mark_rule(strokeWidth=4).encode(x=\"threshold:O\")\n\nout = chart + rule\nout"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in hvplot",
    "text": "Example: Measles Incidence in hvplot\n\n\n\n\n\n\n\n\n\n\n\nGenerate the same data viz in hvplot:\n\n# Make the heatmap with hvplot\nheatmap = measles.hvplot.heatmap(\n    x=\"YEAR\",\n    y=\"state\",\n    C=\"incidence\", # color each square by the incidence\n    reduce_function=np.sum, # sum the incidence for each state/year\n    frame_height=450,\n    frame_width=600,\n    flip_yaxis=True,\n    rot=90,\n    colorbar=False,\n    cmap=\"viridis\",\n    xlabel=\"\",\n    ylabel=\"\",\n)\n\n# Some additional formatting using holoviews \n# For more info: http://holoviews.org/user_guide/Customizing_Plots.html\nheatmap = heatmap.redim(state=\"State\", YEAR=\"Year\")\nheatmap = heatmap.opts(fontsize={\"xticks\": 0, \"yticks\": 6}, toolbar=\"above\")\nheatmap"
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007"
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Health & Environmental Impacts of Warehousing in Ontario, CA",
    "section": "",
    "text": "Goods movement plays a critical role in California’s economic and social life, delivering everything from life-saving vaccines to impulsive Amazon purchases. Warehouses are integral storage and distribution points for goods, and yet, for many communities, bring with them disastrous social, health, and environmental outcomes.\nAs post-pandemic consumers continue to demand more products delivered at a faster pace, the size and number of warehouses are likely to continue growing. Who will be affected by the changes they bring?",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Health & Environmental Impacts of Warehousing in Ontario, CA",
    "section": "",
    "text": "Goods movement plays a critical role in California’s economic and social life, delivering everything from life-saving vaccines to impulsive Amazon purchases. Warehouses are integral storage and distribution points for goods, and yet, for many communities, bring with them disastrous social, health, and environmental outcomes.\nAs post-pandemic consumers continue to demand more products delivered at a faster pace, the size and number of warehouses are likely to continue growing. Who will be affected by the changes they bring?",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "Final-notebooks/2. DataExploration.html",
    "href": "Final-notebooks/2. DataExploration.html",
    "title": "Environmental & Health Impacts of Warehouses in Ontario, CA",
    "section": "",
    "text": "Exploring basic information of all the data of EJI, warehouses, and related facilities of Ontario city.\n\n#importing the neccesary libraries\n\nimport pandas as pd\nimport geopandas as gpd\nimport osmnx as ox\nimport fiona\n\n\n\n\nLoading cleaned, filtered, and merged Environmental Justice Index and Census Tract data\n\n# Importing EJI file\nEJI =gpd.read_file('Data/EJIselectdata.geojson')\nEJI.head()\n\n\n\n\n\n\n\n\n\nstate code\ncounty code\naffgeoid\ngeoid\ncounty\nlocation\nTotal Population\nDay Population\nEJI Rank\nEnvironmental Burden Rank\n...\n% Households &lt; $75,000\n% Uninsured\n% No Internet\n% Age 65+\n% Age 17 or Younger\n% With Disability\n% Limited English\n% Mobile Home\n% Group Quarters\ngeometry\n\n\n\n\n0\n06\n071\n1400000US06071001307\n06071001307\nSan Bernardino\nCensus Tract 13.07, San Bernardino County, Calif\n4212\n2345\n0.6649\n0.8834\n...\n39.6300\n10.6\n14.3\n9.1\n26.3\n8.9\n10.3\n0.0\n0.2\nPOLYGON ((-117.62857 34.09215, -117.62856 34.0...\n\n\n1\n06\n071\n1400000US06071001703\n06071001703\nSan Bernardino\nCensus Tract 17.03, San Bernardino County, Calif\n5680\n2388\n0.4366\n0.6255\n...\n26.3285\n7.0\n5.6\n13.6\n19.4\n7.8\n8.1\n10.8\n0.6\nPOLYGON ((-117.66764 34.03029, -117.66760 34.0...\n\n\n2\n06\n071\n1400000US06071001812\n06071001812\nSan Bernardino\nCensus Tract 18.12, San Bernardino County, Calif\n3477\n2913\n0.9054\n0.9883\n...\n53.0762\n13.0\n26.5\n11.1\n26.0\n11.4\n18.2\n0.0\n1.8\nPOLYGON ((-117.65077 34.04925, -117.65074 34.0...\n\n\n3\n06\n071\n1400000US06071001002\n06071001002\nSan Bernardino\nCensus Tract 10.02, San Bernardino County, Calif\n5929\n1960\n0.6587\n0.7748\n...\n49.3195\n13.9\n24.3\n6.4\n30.3\n7.2\n13.3\n0.0\n0.0\nPOLYGON ((-117.68082 34.07406, -117.68082 34.0...\n\n\n4\n06\n071\n1400000US06071001310\n06071001310\nSan Bernardino\nCensus Tract 13.10, San Bernardino County, Calif\n6193\n2689\n0.7382\n0.9542\n...\n34.8688\n6.4\n13.6\n12.1\n27.3\n10.2\n12.5\n0.9\n3.2\nPOLYGON ((-117.64145 34.08708, -117.64144 34.0...\n\n\n\n\n5 rows × 62 columns\n\n\n\n\n\n# Setting the crs to epsg:4326\nEJI.crs = 'epsg:4326'\n\n\n\n\n\n#defining the area of interest with an address\naddress = 'Ontario International Airport, Vineyard Avenue, Racimo, Ontario, San Bernardino County, California, 91761, United States'\n\n\n#obtaining building data from OSM for the entire city\nosm = ox.geometries_from_address(address,tags={'building':True},dist=5000)\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48300/2257755012.py:2: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  osm = ox.geometries_from_address(address,tags={'building':True},dist=5000)\n\n\n\n#getting more info on the dataset\n#determining hoow many rows/columns\nosm.shape\n#this dataset has 8264 rows and 133 columns\n\n(3119, 130)\n\n\n\n#determining datatype\ntype(osm)\n#this is a geodataframe\n\ngeopandas.geodataframe.GeoDataFrame\n\n\n\n#displaying 10 random rows\nosm.head()\n\n\n\n\n\n\n\n\n\n\naddr:state\nbuilding\nele\ngnis:county_name\ngnis:feature_id\ngnis:reviewed\nname\nsource\ngeometry\naddr:city\n...\ncontent\ngenerator:method\ngenerator:output:electricity\ngenerator:source\ngenerator:type\npower\nways\ntype\nservice:vehicle:smog_check\nservice:vehicle:tune\n\n\nelement_type\nosmid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode\n368173617\nCA\nyes\n377\nSan Bernardino\n1844432\nno\nF C Crowell Memorial Hall\nUSGS Geonames\nPOINT (-117.65043 34.09696)\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n479791356\nCA\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nsurvey;image;yahoo_imagry;local_government\nPOINT (-117.54560 34.08149)\nRancho Cucamonga\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n479791359\nCA\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nsurvey;image;yahoo_imagry;local_government\nPOINT (-117.54563 34.08115)\nRancho Cucamonga\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n479791362\nCA\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nsurvey;image;yahoo_imagry;local_government\nPOINT (-117.54570 34.08083)\nRancho Cucamonga\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n518277168\nCA\nyes\nNaN\nNaN\nNaN\nNaN\nSubway\nimage;survey;usgs_imagery\nPOINT (-117.57604 34.08489)\nRancho Cucamonga\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 130 columns\n\n\n\n\n\n#removing unspecified/unknown building types from the data\n\nosm.drop(osm.loc[osm['building']=='unspecified'].index,inplace=True)\nosm.drop(osm.loc[osm['building']=='yes'].index,inplace=True)\n\n\n#subsetting the data and defining which columns to keep\nctk=['geometry','building']\nosm=osm[ctk]\nosm.head()\n\n\n\n\n\n\n\n\n\n\ngeometry\nbuilding\n\n\nelement_type\nosmid\n\n\n\n\n\n\nnode\n521362425\nPOINT (-117.59008 34.02953)\nhouse\n\n\n521362429\nPOINT (-117.59027 34.02946)\nhouse\n\n\n521362433\nPOINT (-117.59026 34.02885)\nhouse\n\n\n521362436\nPOINT (-117.59004 34.02874)\nhouse\n\n\n521362440\nPOINT (-117.59010 34.02860)\nhouse\n\n\n\n\n\n\n\n\nNow that the data is cleaned, we save the dataframe as a geojson:\n\n#Save geodataframe as as geojson file\nosm.to_file('Data/ontariolanduse.geojson', driver='GeoJSON', mode='w')  \n\n\n\n\n\n#loading first data file on warehouse information\nwh = pd.read_csv('Data/warehouse (1).csv')\nwh.head()\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\n\n\n\n\n0\n051513138\nstorage building\n2021\n275\n7778022\n\n\n1\n046323158\ndistribution warehouse\n2003\n225\n6381893\n\n\n2\n049202124\nstorage warehouse\n2016\n151\n4273702\n\n\n3\n668280017\nwarehouse/dry storage\n1910\n128\n3633789\n\n\n4\n046323161\ndistribution warehouse\n2018\n106\n3014158\n\n\n\n\n\n\n\n\n\n#generating statistics for acreage\nwh['Acres'].describe()\n\ncount    9467.000000\nmean        5.871237\nstd         9.138117\nmin         1.000000\n25%         2.000000\n50%         3.000000\n75%         6.000000\nmax       275.000000\nName: Acres, dtype: float64\n\n\n\n#sorting warehouses by acreage size\nwh.sort_values(by='Acres', ascending=False)\nwh.head()\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\n\n\n\n\n0\n051513138\nstorage building\n2021\n275\n7778022\n\n\n1\n046323158\ndistribution warehouse\n2003\n225\n6381893\n\n\n2\n049202124\nstorage warehouse\n2016\n151\n4273702\n\n\n3\n668280017\nwarehouse/dry storage\n1910\n128\n3633789\n\n\n4\n046323161\ndistribution warehouse\n2018\n106\n3014158\n\n\n\n\n\n\n\n\n\n#sorting warehouses by year built\nwh.sort_values(by='Year built', ascending=True)\nwh.head()\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\n\n\n\n\n0\n051513138\nstorage building\n2021\n275\n7778022\n\n\n1\n046323158\ndistribution warehouse\n2003\n225\n6381893\n\n\n2\n049202124\nstorage warehouse\n2016\n151\n4273702\n\n\n3\n668280017\nwarehouse/dry storage\n1910\n128\n3633789\n\n\n4\n046323161\ndistribution warehouse\n2018\n106\n3014158\n\n\n\n\n\n\n\n\n\n#removing 1910 value \n# '1910' is the year given to warehouses with an unknown construction date)\nwh.drop(wh.loc[wh['Year built']==1910].index, inplace=True)\n\n\n#checking for empty values\nwh.columns[wh.isna().all()].tolist()\n\n[]\n\n\n\n#filtering out unwanted columns\ndesired_columns=['Acres','Year built', 'Building sq.ft.']\n\n\n#creating a copy so that the table doesn't revert to the original data\nwh_new=wh[desired_columns].copy()\nwh_new.head()\n\n\n\n\n\n\n\n\n\nAcres\nYear built\nBuilding sq.ft.\n\n\n\n\n0\n275\n2021\n7778022\n\n\n1\n225\n2003\n6381893\n\n\n2\n151\n2016\n4273702\n\n\n4\n106\n2018\n3014158\n\n\n5\n106\n1941\n2990190\n\n\n\n\n\n\n\n\nThe dataframe of warehouses have been cleaned up to only information of acres, year built, and building sq.ft.\nNow, I’ll convert the dataframe to a csv:\n\n#input: using pandas to covert the merged and filtered dataframe to a csv\n#output: csv created but still needs to be saved\nconvertcsv= pd.DataFrame(wh_new)\ncsv_wh_new = convertcsv.to_csv(index=False)\n\n\n#input: saving the data from the data frame into a the csv file created \n#output: file should appear on the folder\nwith open('Data/warehousecharts.csv', 'w') as csv_file:\n    convertcsv.to_csv(path_or_buf=csv_file)\n\n\n\n\n\n# See all the columns and rows.\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# Import warehouse data and convert the datatype of 'Assessor parcel number' and 'Building classification' from 'int' or 'float' to 'str'\n             \nWarehouses = pd.read_csv('Data/Warehouse_Data.csv',\n        dtype=\n        {\n            'Assessor parcel number':str,\n            'Building classification':str,\n        }\n)\n\nSan_Bern_Parcels = gpd.read_file('Data/Ontario Parcels/SBCo_Parcel_Polygons.shp')\n\nSan_Bern_Parcels.rename(columns = {'ParcelNumb':'Assessor parcel number'}, inplace = True)\n\n#merge the warehouses and parcel shapefile on the San Bernandino County Tax Assessor parcel Number\nWarehouse_Parcel=Warehouses.merge(San_Bern_Parcels,on=\"Assessor parcel number\")\nWarehouse_Parcel_Geo = gpd.GeoDataFrame(Warehouse_Parcel, geometry='geometry', crs=\"EPSG:4326\")\n\nWarehouse_Parcel_Geo.head()\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\nOBJECTID\nOwnerName\nLandValue\nImprovemen\nPersonalPr\nExemptionV\nHomeOwnerE\nAcreage\nTaxStatus\nTaxRateAre\nZoning\nZoningDesc\nJurisdicti\nJurisdic_1\nBaseYear\nPageMap\nAssessDesc\nAssessClas\nShape__Are\nShape__Len\ngeometry\n\n\n\n\n0\n023812175\ndistribution warehouse\n1996\n93\n2646053\n157685\nTOYOTA MOTOR SALES U S A INC\n51,510,534\n30,864,960\n0\n0\nNaN\n93.45\nASSESSED BY COUNTY\n0004030\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1993\n023812\nDISTRIBUTION WAREHOUSE\nCOMMERCIAL\n552237.437500\n3009.581112\nPOLYGON ((-117.55796 34.04799, -117.55689 34.0...\n\n\n1\n021126319\ntransit warehouse (truck terminal)\n1992\n70\n1986082\n123022\nUPS WORLDWIDE FORWARDING INC\n25,587,357\n54,634,664\n0\n0\nNaN\n66.66\nASSESSED BY COUNTY\n0004004\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021126\nTRANSIT WAREHOUSE (TRUCK TERMINAL)\nINDUSTRIAL\n414508.363281\n2895.298085\nPOLYGON ((-117.57896 34.04811, -117.57893 34.0...\n\n\n2\n107311124\ndistribution warehouse\n2021\n62\n1748594\n685625\nOLV PHASE II LP\n65,790,000\n75,500,000\n0\n0\nNaN\n61.76\nASSESSED BY COUNTY\n0004089\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n107311\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n364429.617188\n2738.202572\nPOLYGON ((-117.60640 33.99035, -117.60638 33.9...\n\n\n3\n021121315\nstorage warehouse\n1992\n61\n1723857\n121965\nUPS WORLDWIDE FORWARDING INC\n24,185,220\n24,451,343\n0\n0\nNaN\n58.99\nASSESSED BY COUNTY\n0004004\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021121\nSTORAGE WAREHOUSE\nCOMMERCIAL\n359815.906250\n2461.426213\nPOLYGON ((-117.58314 34.05195, -117.58208 34.0...\n\n\n4\n023808145\ndistribution warehouse\n1980\n59\n1681858\n157834\nCOSTCO WHOLESALE CORPORATION\n76,500,000\n147,900,000\n0\n0\nNaN\n59.42\nASSESSED BY COUNTY\n0004025\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n023808\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n351134.007812\n2355.939087\nPOLYGON ((-117.53289 34.06252, -117.52727 34.0...\n\n\n\n\n\n\n\n\n\n#Save dataframe (Warehouse_Parcel)as as csv file\n\n#input: using pandas to covert the merged and filtered dataframe to a csv\n#output: csv created but still needs to be saved\nconvertcsv= pd.DataFrame(Warehouse_Parcel)\nWarehouse_Parcel = convertcsv.to_csv(index=False)\n\n\n#input: saving the data from the data frame into a the csv file created \n#output: file should appear on the folder\nwith open('Data/warehouseparcelmaps.csv', 'w') as csv_file:\n    convertcsv.to_csv(path_or_buf=csv_file)\n\nNow I save the other dataframe as a geojson\n\n#Save geodataframe (Warehouse_Parcel_Geo) as as geojson file\nWarehouse_Parcel_Geo.to_file('Data/warehousemaps.geojson', driver='GeoJSON', mode='w')",
    "crumbs": [
      "Analysis Sections",
      "2 Data Cleaning-Data Exploration"
    ]
  },
  {
    "objectID": "Final-notebooks/2. DataExploration.html#data-exploration",
    "href": "Final-notebooks/2. DataExploration.html#data-exploration",
    "title": "Environmental & Health Impacts of Warehouses in Ontario, CA",
    "section": "",
    "text": "Exploring basic information of all the data of EJI, warehouses, and related facilities of Ontario city.\n\n#importing the neccesary libraries\n\nimport pandas as pd\nimport geopandas as gpd\nimport osmnx as ox\nimport fiona\n\n\n\n\nLoading cleaned, filtered, and merged Environmental Justice Index and Census Tract data\n\n# Importing EJI file\nEJI =gpd.read_file('Data/EJIselectdata.geojson')\nEJI.head()\n\n\n\n\n\n\n\n\n\nstate code\ncounty code\naffgeoid\ngeoid\ncounty\nlocation\nTotal Population\nDay Population\nEJI Rank\nEnvironmental Burden Rank\n...\n% Households &lt; $75,000\n% Uninsured\n% No Internet\n% Age 65+\n% Age 17 or Younger\n% With Disability\n% Limited English\n% Mobile Home\n% Group Quarters\ngeometry\n\n\n\n\n0\n06\n071\n1400000US06071001307\n06071001307\nSan Bernardino\nCensus Tract 13.07, San Bernardino County, Calif\n4212\n2345\n0.6649\n0.8834\n...\n39.6300\n10.6\n14.3\n9.1\n26.3\n8.9\n10.3\n0.0\n0.2\nPOLYGON ((-117.62857 34.09215, -117.62856 34.0...\n\n\n1\n06\n071\n1400000US06071001703\n06071001703\nSan Bernardino\nCensus Tract 17.03, San Bernardino County, Calif\n5680\n2388\n0.4366\n0.6255\n...\n26.3285\n7.0\n5.6\n13.6\n19.4\n7.8\n8.1\n10.8\n0.6\nPOLYGON ((-117.66764 34.03029, -117.66760 34.0...\n\n\n2\n06\n071\n1400000US06071001812\n06071001812\nSan Bernardino\nCensus Tract 18.12, San Bernardino County, Calif\n3477\n2913\n0.9054\n0.9883\n...\n53.0762\n13.0\n26.5\n11.1\n26.0\n11.4\n18.2\n0.0\n1.8\nPOLYGON ((-117.65077 34.04925, -117.65074 34.0...\n\n\n3\n06\n071\n1400000US06071001002\n06071001002\nSan Bernardino\nCensus Tract 10.02, San Bernardino County, Calif\n5929\n1960\n0.6587\n0.7748\n...\n49.3195\n13.9\n24.3\n6.4\n30.3\n7.2\n13.3\n0.0\n0.0\nPOLYGON ((-117.68082 34.07406, -117.68082 34.0...\n\n\n4\n06\n071\n1400000US06071001310\n06071001310\nSan Bernardino\nCensus Tract 13.10, San Bernardino County, Calif\n6193\n2689\n0.7382\n0.9542\n...\n34.8688\n6.4\n13.6\n12.1\n27.3\n10.2\n12.5\n0.9\n3.2\nPOLYGON ((-117.64145 34.08708, -117.64144 34.0...\n\n\n\n\n5 rows × 62 columns\n\n\n\n\n\n# Setting the crs to epsg:4326\nEJI.crs = 'epsg:4326'\n\n\n\n\n\n#defining the area of interest with an address\naddress = 'Ontario International Airport, Vineyard Avenue, Racimo, Ontario, San Bernardino County, California, 91761, United States'\n\n\n#obtaining building data from OSM for the entire city\nosm = ox.geometries_from_address(address,tags={'building':True},dist=5000)\n\n/var/folders/hq/3wb5jt414fv1kq3tt4q8cjbm0000gn/T/ipykernel_48300/2257755012.py:2: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  osm = ox.geometries_from_address(address,tags={'building':True},dist=5000)\n\n\n\n#getting more info on the dataset\n#determining hoow many rows/columns\nosm.shape\n#this dataset has 8264 rows and 133 columns\n\n(3119, 130)\n\n\n\n#determining datatype\ntype(osm)\n#this is a geodataframe\n\ngeopandas.geodataframe.GeoDataFrame\n\n\n\n#displaying 10 random rows\nosm.head()\n\n\n\n\n\n\n\n\n\n\naddr:state\nbuilding\nele\ngnis:county_name\ngnis:feature_id\ngnis:reviewed\nname\nsource\ngeometry\naddr:city\n...\ncontent\ngenerator:method\ngenerator:output:electricity\ngenerator:source\ngenerator:type\npower\nways\ntype\nservice:vehicle:smog_check\nservice:vehicle:tune\n\n\nelement_type\nosmid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode\n368173617\nCA\nyes\n377\nSan Bernardino\n1844432\nno\nF C Crowell Memorial Hall\nUSGS Geonames\nPOINT (-117.65043 34.09696)\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n479791356\nCA\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nsurvey;image;yahoo_imagry;local_government\nPOINT (-117.54560 34.08149)\nRancho Cucamonga\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n479791359\nCA\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nsurvey;image;yahoo_imagry;local_government\nPOINT (-117.54563 34.08115)\nRancho Cucamonga\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n479791362\nCA\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nsurvey;image;yahoo_imagry;local_government\nPOINT (-117.54570 34.08083)\nRancho Cucamonga\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n518277168\nCA\nyes\nNaN\nNaN\nNaN\nNaN\nSubway\nimage;survey;usgs_imagery\nPOINT (-117.57604 34.08489)\nRancho Cucamonga\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 130 columns\n\n\n\n\n\n#removing unspecified/unknown building types from the data\n\nosm.drop(osm.loc[osm['building']=='unspecified'].index,inplace=True)\nosm.drop(osm.loc[osm['building']=='yes'].index,inplace=True)\n\n\n#subsetting the data and defining which columns to keep\nctk=['geometry','building']\nosm=osm[ctk]\nosm.head()\n\n\n\n\n\n\n\n\n\n\ngeometry\nbuilding\n\n\nelement_type\nosmid\n\n\n\n\n\n\nnode\n521362425\nPOINT (-117.59008 34.02953)\nhouse\n\n\n521362429\nPOINT (-117.59027 34.02946)\nhouse\n\n\n521362433\nPOINT (-117.59026 34.02885)\nhouse\n\n\n521362436\nPOINT (-117.59004 34.02874)\nhouse\n\n\n521362440\nPOINT (-117.59010 34.02860)\nhouse\n\n\n\n\n\n\n\n\nNow that the data is cleaned, we save the dataframe as a geojson:\n\n#Save geodataframe as as geojson file\nosm.to_file('Data/ontariolanduse.geojson', driver='GeoJSON', mode='w')  \n\n\n\n\n\n#loading first data file on warehouse information\nwh = pd.read_csv('Data/warehouse (1).csv')\nwh.head()\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\n\n\n\n\n0\n051513138\nstorage building\n2021\n275\n7778022\n\n\n1\n046323158\ndistribution warehouse\n2003\n225\n6381893\n\n\n2\n049202124\nstorage warehouse\n2016\n151\n4273702\n\n\n3\n668280017\nwarehouse/dry storage\n1910\n128\n3633789\n\n\n4\n046323161\ndistribution warehouse\n2018\n106\n3014158\n\n\n\n\n\n\n\n\n\n#generating statistics for acreage\nwh['Acres'].describe()\n\ncount    9467.000000\nmean        5.871237\nstd         9.138117\nmin         1.000000\n25%         2.000000\n50%         3.000000\n75%         6.000000\nmax       275.000000\nName: Acres, dtype: float64\n\n\n\n#sorting warehouses by acreage size\nwh.sort_values(by='Acres', ascending=False)\nwh.head()\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\n\n\n\n\n0\n051513138\nstorage building\n2021\n275\n7778022\n\n\n1\n046323158\ndistribution warehouse\n2003\n225\n6381893\n\n\n2\n049202124\nstorage warehouse\n2016\n151\n4273702\n\n\n3\n668280017\nwarehouse/dry storage\n1910\n128\n3633789\n\n\n4\n046323161\ndistribution warehouse\n2018\n106\n3014158\n\n\n\n\n\n\n\n\n\n#sorting warehouses by year built\nwh.sort_values(by='Year built', ascending=True)\nwh.head()\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\n\n\n\n\n0\n051513138\nstorage building\n2021\n275\n7778022\n\n\n1\n046323158\ndistribution warehouse\n2003\n225\n6381893\n\n\n2\n049202124\nstorage warehouse\n2016\n151\n4273702\n\n\n3\n668280017\nwarehouse/dry storage\n1910\n128\n3633789\n\n\n4\n046323161\ndistribution warehouse\n2018\n106\n3014158\n\n\n\n\n\n\n\n\n\n#removing 1910 value \n# '1910' is the year given to warehouses with an unknown construction date)\nwh.drop(wh.loc[wh['Year built']==1910].index, inplace=True)\n\n\n#checking for empty values\nwh.columns[wh.isna().all()].tolist()\n\n[]\n\n\n\n#filtering out unwanted columns\ndesired_columns=['Acres','Year built', 'Building sq.ft.']\n\n\n#creating a copy so that the table doesn't revert to the original data\nwh_new=wh[desired_columns].copy()\nwh_new.head()\n\n\n\n\n\n\n\n\n\nAcres\nYear built\nBuilding sq.ft.\n\n\n\n\n0\n275\n2021\n7778022\n\n\n1\n225\n2003\n6381893\n\n\n2\n151\n2016\n4273702\n\n\n4\n106\n2018\n3014158\n\n\n5\n106\n1941\n2990190\n\n\n\n\n\n\n\n\nThe dataframe of warehouses have been cleaned up to only information of acres, year built, and building sq.ft.\nNow, I’ll convert the dataframe to a csv:\n\n#input: using pandas to covert the merged and filtered dataframe to a csv\n#output: csv created but still needs to be saved\nconvertcsv= pd.DataFrame(wh_new)\ncsv_wh_new = convertcsv.to_csv(index=False)\n\n\n#input: saving the data from the data frame into a the csv file created \n#output: file should appear on the folder\nwith open('Data/warehousecharts.csv', 'w') as csv_file:\n    convertcsv.to_csv(path_or_buf=csv_file)\n\n\n\n\n\n# See all the columns and rows.\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# Import warehouse data and convert the datatype of 'Assessor parcel number' and 'Building classification' from 'int' or 'float' to 'str'\n             \nWarehouses = pd.read_csv('Data/Warehouse_Data.csv',\n        dtype=\n        {\n            'Assessor parcel number':str,\n            'Building classification':str,\n        }\n)\n\nSan_Bern_Parcels = gpd.read_file('Data/Ontario Parcels/SBCo_Parcel_Polygons.shp')\n\nSan_Bern_Parcels.rename(columns = {'ParcelNumb':'Assessor parcel number'}, inplace = True)\n\n#merge the warehouses and parcel shapefile on the San Bernandino County Tax Assessor parcel Number\nWarehouse_Parcel=Warehouses.merge(San_Bern_Parcels,on=\"Assessor parcel number\")\nWarehouse_Parcel_Geo = gpd.GeoDataFrame(Warehouse_Parcel, geometry='geometry', crs=\"EPSG:4326\")\n\nWarehouse_Parcel_Geo.head()\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\nOBJECTID\nOwnerName\nLandValue\nImprovemen\nPersonalPr\nExemptionV\nHomeOwnerE\nAcreage\nTaxStatus\nTaxRateAre\nZoning\nZoningDesc\nJurisdicti\nJurisdic_1\nBaseYear\nPageMap\nAssessDesc\nAssessClas\nShape__Are\nShape__Len\ngeometry\n\n\n\n\n0\n023812175\ndistribution warehouse\n1996\n93\n2646053\n157685\nTOYOTA MOTOR SALES U S A INC\n51,510,534\n30,864,960\n0\n0\nNaN\n93.45\nASSESSED BY COUNTY\n0004030\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1993\n023812\nDISTRIBUTION WAREHOUSE\nCOMMERCIAL\n552237.437500\n3009.581112\nPOLYGON ((-117.55796 34.04799, -117.55689 34.0...\n\n\n1\n021126319\ntransit warehouse (truck terminal)\n1992\n70\n1986082\n123022\nUPS WORLDWIDE FORWARDING INC\n25,587,357\n54,634,664\n0\n0\nNaN\n66.66\nASSESSED BY COUNTY\n0004004\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021126\nTRANSIT WAREHOUSE (TRUCK TERMINAL)\nINDUSTRIAL\n414508.363281\n2895.298085\nPOLYGON ((-117.57896 34.04811, -117.57893 34.0...\n\n\n2\n107311124\ndistribution warehouse\n2021\n62\n1748594\n685625\nOLV PHASE II LP\n65,790,000\n75,500,000\n0\n0\nNaN\n61.76\nASSESSED BY COUNTY\n0004089\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n107311\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n364429.617188\n2738.202572\nPOLYGON ((-117.60640 33.99035, -117.60638 33.9...\n\n\n3\n021121315\nstorage warehouse\n1992\n61\n1723857\n121965\nUPS WORLDWIDE FORWARDING INC\n24,185,220\n24,451,343\n0\n0\nNaN\n58.99\nASSESSED BY COUNTY\n0004004\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021121\nSTORAGE WAREHOUSE\nCOMMERCIAL\n359815.906250\n2461.426213\nPOLYGON ((-117.58314 34.05195, -117.58208 34.0...\n\n\n4\n023808145\ndistribution warehouse\n1980\n59\n1681858\n157834\nCOSTCO WHOLESALE CORPORATION\n76,500,000\n147,900,000\n0\n0\nNaN\n59.42\nASSESSED BY COUNTY\n0004025\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n2021\n023808\nDISTRIBUTION WAREHOUSE\nINDUSTRIAL\n351134.007812\n2355.939087\nPOLYGON ((-117.53289 34.06252, -117.52727 34.0...\n\n\n\n\n\n\n\n\n\n#Save dataframe (Warehouse_Parcel)as as csv file\n\n#input: using pandas to covert the merged and filtered dataframe to a csv\n#output: csv created but still needs to be saved\nconvertcsv= pd.DataFrame(Warehouse_Parcel)\nWarehouse_Parcel = convertcsv.to_csv(index=False)\n\n\n#input: saving the data from the data frame into a the csv file created \n#output: file should appear on the folder\nwith open('Data/warehouseparcelmaps.csv', 'w') as csv_file:\n    convertcsv.to_csv(path_or_buf=csv_file)\n\nNow I save the other dataframe as a geojson\n\n#Save geodataframe (Warehouse_Parcel_Geo) as as geojson file\nWarehouse_Parcel_Geo.to_file('Data/warehousemaps.geojson', driver='GeoJSON', mode='w')",
    "crumbs": [
      "Analysis Sections",
      "2 Data Cleaning-Data Exploration"
    ]
  },
  {
    "objectID": "Final-notebooks/1. AboutProject.html",
    "href": "Final-notebooks/1. AboutProject.html",
    "title": "Environmental & Health Impacts of Warehouses in Ontario, CA",
    "section": "",
    "text": "This project seeks to explore the relationship between warehouses and environmental, social, and health outcomes in the communities surrounding them in Ontario, California.",
    "crumbs": [
      "Analysis Sections",
      "1 About Project"
    ]
  },
  {
    "objectID": "Final-notebooks/1. AboutProject.html#research-question",
    "href": "Final-notebooks/1. AboutProject.html#research-question",
    "title": "Environmental & Health Impacts of Warehouses in Ontario, CA",
    "section": "",
    "text": "This project seeks to explore the relationship between warehouses and environmental, social, and health outcomes in the communities surrounding them in Ontario, California.",
    "crumbs": [
      "Analysis Sections",
      "1 About Project"
    ]
  },
  {
    "objectID": "Final-notebooks/1. AboutProject.html#importance",
    "href": "Final-notebooks/1. AboutProject.html#importance",
    "title": "Environmental & Health Impacts of Warehouses in Ontario, CA",
    "section": "Importance",
    "text": "Importance\nConsidering the simultaneously skyrocketing consumer demand that will likely increase the potential burden of warehousing operations on Southern California’s key trade corridors, goods movement is a pressing issue at the city, regional, state, and national levels.\nCity and regional logistics and other warehousing needs contribute to Southern California’s severe traffic congestion and air pollution, yet serve a critical role in providing essential goods and services, whether life-saving vaccines or emergency supplies after natural disasters.\nWarehousing operations add additional burdens to already overburdened communities by increasing exposure to air pollution and increasing the health risks to communities close to the warehouse facilities.",
    "crumbs": [
      "Analysis Sections",
      "1 About Project"
    ]
  },
  {
    "objectID": "Final-notebooks/1. AboutProject.html#spatial-scope",
    "href": "Final-notebooks/1. AboutProject.html#spatial-scope",
    "title": "Environmental & Health Impacts of Warehouses in Ontario, CA",
    "section": "Spatial Scope",
    "text": "Spatial Scope\nThe scope for this project encompasses Ontario, CA, the city with the most existing and planned warehouses in Califiornia.",
    "crumbs": [
      "Analysis Sections",
      "1 About Project"
    ]
  },
  {
    "objectID": "Final-notebooks/1. AboutProject.html#data-sources",
    "href": "Final-notebooks/1. AboutProject.html#data-sources",
    "title": "Environmental & Health Impacts of Warehouses in Ontario, CA",
    "section": "Data Sources",
    "text": "Data Sources\nEnvironmental Justice Index(EJI)\nThe EJI is a newer index administered by the CDC that provides information on what communities experience severe cumulative impacts from environmental burden. This dataset provides environmental, social, and health data that we use to identify the causes of vulnerability for the communities in Ontario. Selected indicators from this dataset can be overlaid with warehouse data to identify a link between the growth of warehouses in the area and environmental justice burdens.\nWarehouse CITY data\nThe Warehouse CITY (communitY Cumulative Impact Tool) data data currently contains information on assessor parcel number, year built, and type. This data is collected with the purpose of providing a tool to help communities in Southern California understand and quantify the cumulative impacts of warehouses in the region.\nCalifornia State Geoportal\nThis dataset provides access to various geospatial data and services related to the state of California, including data on topography, demographics, land use, natural resources, and other related topics. We downloaded geojson files of Ontario city’s schools, parks, the airport, or any public places to see their locations and how warehouses may possibly impact people using these facilities.\n2021: ACS 5-Year Estimates\nTable S0501: Selected Characteristics of the Native and Foreign-Born Populations. This dataset provides basic demographic data for the City of Ontario. We use this data to provide a demographic overview of the people who live there.\n2019 and 2010: ACS 5-Year Estimates\nTable S0501: Selected Characteristics of the Native and Foreign-Born Populations. We use this dataseset at the block group level to the investigate the economic effects of warehouses in Ontario.\nQualitative Sources\nThis link contains a detailed bibliography of references for our qualitative research and literature review.",
    "crumbs": [
      "Analysis Sections",
      "1 About Project"
    ]
  },
  {
    "objectID": "Final-notebooks/4. Demographics.html",
    "href": "Final-notebooks/4. Demographics.html",
    "title": "Demographic Analysis for Ontario, City",
    "section": "",
    "text": "ACS 5-year estimates, 2021",
    "crumbs": [
      "Analysis Sections",
      "4 Demographics"
    ]
  },
  {
    "objectID": "Final-notebooks/4. Demographics.html#age",
    "href": "Final-notebooks/4. Demographics.html#age",
    "title": "Demographic Analysis for Ontario, City",
    "section": "Age",
    "text": "Age\n\n\n\n\n\n\n\n\n\n\nAge\nPopulation\n\n\n\n\n0\nUnder 5 years\n0.07\n\n\n1\n5 to 17 years\n0.19\n\n\n2\n18 to 24 years\n0.11\n\n\n3\n25 to 44 years\n0.31\n\n\n4\n45 to 54 years\n0.12\n\n\n\n\n\n\n\n\n\n\n                                                \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\nThe total population in Ontario is 175,223 people. About 26% of the population are children and 10% are older adults.",
    "crumbs": [
      "Analysis Sections",
      "4 Demographics"
    ]
  },
  {
    "objectID": "Final-notebooks/4. Demographics.html#race",
    "href": "Final-notebooks/4. Demographics.html#race",
    "title": "Demographic Analysis for Ontario, City",
    "section": "Race",
    "text": "Race\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nPopulation\n\n\n\n\n0\nWhite\n0.41\n\n\n1\nBlack or African American\n0.06\n\n\n2\nAmerican Indian and Alaska Native\n0.01\n\n\n3\nAsian\n0.07\n\n\n4\nSome other race\n0.27\n\n\n5\nTwo or more races\n0.18\n\n\n6\nNaN\nNaN\n\n\n7\nNaN\nNaN\n\n\n8\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nPopulation\n\n\n\n\n0\nWhite\n0.41\n\n\n1\nBlack or African American\n0.06\n\n\n2\nAmerican Indian and Alaska Native\n0.01\n\n\n3\nAsian\n0.07\n\n\n4\nSome other race\n0.27\n\n\n5\nTwo or more races\n0.18\n\n\n\n\n\n\n\n\n\n\n                                                \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\nThe majority of the population in Ontario is not white. 41% of the population is white but this number includes people who are Hispanic or Latino. The non-Hispanic or Latino white only population is 15%. This means that Ontario is a majority minority population city.",
    "crumbs": [
      "Analysis Sections",
      "4 Demographics"
    ]
  },
  {
    "objectID": "Final-notebooks/4. Demographics.html#hispanic-and-latino-population",
    "href": "Final-notebooks/4. Demographics.html#hispanic-and-latino-population",
    "title": "Demographic Analysis for Ontario, City",
    "section": "Hispanic and Latino Population",
    "text": "Hispanic and Latino Population\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nPopulation\n\n\n\n\n0\nHispanic or Latino origin\n0.7\n\n\n1\nNot Hispanic or Latino\n0.3\n\n\n\n\n\n\n\n\n\n\n                                                \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n70% of the population in Ontario is Hispanic or Latino.",
    "crumbs": [
      "Analysis Sections",
      "4 Demographics"
    ]
  },
  {
    "objectID": "Final-notebooks/4. Demographics.html#education",
    "href": "Final-notebooks/4. Demographics.html#education",
    "title": "Demographic Analysis for Ontario, City",
    "section": "Education",
    "text": "Education\n\n\n\n\n\n\n\n\n\n\nEDUCATIONAL ATTAINMENT\nPopulation\n\n\n\n\n0\nLess than high school graduate\n0.24\n\n\n1\nHigh school graduate (includes equivalency)\n0.27\n\n\n2\nSome college or associate's degree\n0.31\n\n\n3\nBachelor's degree\n0.14\n\n\n4\nGraduate or professional degree\n0.05\n\n\n\n\n\n\n\n\n\n\n                                                \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\nOnly 19% of the population in Ontario has a bachelor’s degree or higher while 51% have a high school certificate or less.",
    "crumbs": [
      "Analysis Sections",
      "4 Demographics"
    ]
  },
  {
    "objectID": "Final-notebooks/4. Demographics.html#poverty",
    "href": "Final-notebooks/4. Demographics.html#poverty",
    "title": "Demographic Analysis for Ontario, City",
    "section": "Poverty",
    "text": "Poverty\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nPopulation\n\n\n\n\n0\nBelow 100 percent of the poverty level\n0.13\n\n\n1\n100 to 199 percent of the poverty level\n0.20\n\n\n2\nAt or above 200 percent of the poverty level\n0.67\n\n\n\n\n\n\n\n\n\n\n                                                \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;",
    "crumbs": [
      "Analysis Sections",
      "4 Demographics"
    ]
  },
  {
    "objectID": "Final-notebooks/4. Demographics.html#industries",
    "href": "Final-notebooks/4. Demographics.html#industries",
    "title": "Demographic Analysis for Ontario, City",
    "section": "Industries",
    "text": "Industries\n\n\n\n\n\n\n\n\n\n\nINDUSTRY\nPopulation\n\n\n\n\n0\nEducational services, and health care and soci...\n0.18\n\n\n1\nRetail trade\n0.14\n\n\n2\nManufacturing\n0.11\n\n\n3\nTransportation and warehousing, and utilities\n0.11\n\n\n4\nProfessional, scientific, and management, and ...\n0.10\n\n\n5\nArts, entertainment, and recreation, and accom...\n0.10\n\n\n6\nConstruction\n0.07\n\n\n7\nOther services (except public administration)\n0.05\n\n\n8\nWholesale trade\n0.04\n\n\n9\nFinance and insurance, and real estate and ren...\n0.04\n\n\n10\nPublic administration\n0.04\n\n\n11\nAgriculture, forestry, fishing and hunting, an...\n0.01\n\n\n12\nInformation\n0.01\n\n\n\n\n\n\n\n\n\n\n                                                \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n11% of the population living in Ontario and in the workforce works for the ‘Transportation and warehousing, and utilities’ industry.",
    "crumbs": [
      "Analysis Sections",
      "4 Demographics"
    ]
  },
  {
    "objectID": "Final-notebooks/3. LoopingWarehouseMap.html",
    "href": "Final-notebooks/3. LoopingWarehouseMap.html",
    "title": "Looping the Ontario Warehouse Map to create a GIF",
    "section": "",
    "text": "One of the best ways to explore how Ontario has changed because of warehouses is plot them in a loop over time.\n\nCalling the data\n\n\nPreparing the For loop\nTo get ready to producing a looping image of the warehouses in ontario by the decades. To make it graphically pleasing, I’ll sort the year each warehouse was built by decade.\n\n\n\n\n\n\n\n\n\n\nAssessor parcel number\nBuilding classification\nYear built\nAcres\nBuilding sq.ft.\nOBJECTID\nOwnerName\nLandValue\nImprovemen\nPersonalPr\nExemptionV\nHomeOwnerE\nAcreage\nTaxStatus\nTaxRateAre\nZoning\nZoningDesc\nJurisdicti\nJurisdic_1\nBaseYear\nPageMap\nAssessDesc\nAssessClas\nShape__Are\nShape__Len\ngeometry\nDecade Built\n\n\n\n\n0\n023812175\ndistribution warehouse\n1996\n93\n2646053\n157685\nTOYOTA MOTOR SALES U S A INC\n51,510,534\n30,864,960\n0\n0\nNaN\n93.45\nASSESSED BY COUNTY\n0004030\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1993\n023812\nDISTRIBUTION WAREHOUSE\nCOMMERCIAL\n552237.437500\n3009.581112\nPOLYGON ((-117.55796 34.04799, -117.55689 34.0...\n1990\n\n\n1\n021126319\ntransit warehouse (truck terminal)\n1992\n70\n1986082\n123022\nUPS WORLDWIDE FORWARDING INC\n25,587,357\n54,634,664\n0\n0\nNaN\n66.66\nASSESSED BY COUNTY\n0004004\nCITY OF ONTARIO\nCity of Ontario\nCity of Ontario\nhttp://www.ci.ontario.ca.us/\n1992\n021126\nTRANSIT WAREHOUSE (TRUCK TERMINAL)\nINDUSTRIAL\n414508.363281\n2895.298085\nPOLYGON ((-117.57896 34.04811, -117.57893 34.0...\n1990\n\n\n\n\n\n\n\n\n\n\nPlotting\nNow its time to create a for loop which consistenly generates a map of the warehouses of onario. The legend will help the reader know how old the warehouses are.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay it!\nI have produced several png files and a gif file. Now we just have to display it!\n\n\nIndustry in Ontario\n96,000 trucks travel in Ontario, producing more than 8 million pounds of CO2 every day.\nThe city’s 600 warehouses take up around 16% of the city’s land, with more on the way.\nOntario’s warehouses continue to grow in size and acreage over time, with nearly 20% having been built in the last 3 years. See the map below to see how facility growth since 1910.\n\n\n\nWarehouses Animation\n\n\nThis is the gif that displays warehouse built in Ontario for every decade available. It is easy to see that most warehouses were built after 1980.\nStudies approximate that warehouses can generate between .33 to .66 daily truck trips per 1,000 square feet. By this measure, the new Amazon facility could contribute an additional 2,640 daily trips to the Ontario area.",
    "crumbs": [
      "Analysis Sections",
      "3 Looping Warehouse Map"
    ]
  }
]